from th.models import *from django.db import connectionimport datetimefrom django.db.models.aggregates import Maxfrom django.db.models.aggregates import Sumfrom django.contrib.auth.hashers import make_password,check_passwordfrom django.contrib import messagesimport timefrom django.utils.timezone import now, timedeltaimport copyimport randomfrom th.pokerConnection import *def func_get_clubid(club_name):    try:        result = poker_get_clubid(club_name)    except Exception as e:        return False    if result:        result = result[0]['clubId']    return resultdef func_register_club(club_name, game_club_id,club_level,club_short_name,water_rate,insurance_rate):    if Club.objects.filter(inactive_time='2037-01-01').filter(club_name=club_name).exists():        return False    if ClubId.objects.filter(inactive_time='2037-01-01').filter(game_club_id=game_club_id).exists():        return False    try:        t = ClubId(game_club_id=game_club_id,                   club_name=club_name)        t.save()    except Exception as e:        return False    try:        club_id = ClubId.objects.filter(inactive_time='2037-01-01').get(game_club_id=game_club_id).club_id    except Exception as e:        return False    try:        t = Club(club_id=club_id,                 game_club_id=game_club_id,                 club_level=club_level,                 club_name=club_name,                 club_short_name=club_short_name,                 water_rate=water_rate,                 insurance_rate=insurance_rate               )        t.save()    except Exception as e:        return False    return Truedef func_register_user_batch(game_club_id):    returndef func_clubuser_init(game_club_id):  # 由系统导入新增玩家，不适合大批量导入    list_game_user_id=poker_get_club_player_all(game_club_id)    try:        club_id=Club.objects.filter(inactive_time='2037-01-01').get(game_club_id=game_club_id).club_id    except Exception as e:        return False    str_game_user_id = ""    if list_game_user_id:        for t in list_game_user_id:            if str_game_user_id == "":                str_game_user_id = str_game_user_id + "("+copy.deepcopy(str(t))+")"            else:                str_game_user_id = str_game_user_id + ",("+copy.deepcopy(str(t))+")"    str_sql = "insert into tmp_gameUserId values" + str_game_user_id    with connection.cursor() as cursor:        cursor.callproc('clubPlayerBatch', (str_sql,club_id))        tb_result=cursor.fetchall()    for t in tb_result:        msg='系统新注册玩家' + str(t[0]) + ';' + '俱乐部新注册玩家' + str(t[1]) + ';'    list_user_name = poker_get_user_name_list(list_game_user_id)    str_user_name = ''    if list_user_name:        for t in list_user_name:            if str_user_name == '':                str_user_name = '(' + str(t['playerId']) + ',' + '"' + t['nickname'] + '"' + ')'            else:                str_user_name = str_user_name + ',(' + str(t['playerId']) + ',' + '"' + t['nickname'] + '"' + ')'        str_sql = "insert into tmp_gameUserName values" + str_user_name    with connection.cursor() as cursor:        cursor.callproc('registerUserBatch', (str_sql,))    return msgdef func_add_group(group_name, club_id):  # 增加客服财务组函数    try:        if OperatorGroup.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(group_name=group_name).exists():            return False        else:            t=OperatorGroup(group_name=group_name,                            club_id=club_id)            t.save()            group_id=OperatorGroup.objects.filter(inactive_time='2037-01-01').get(group_name=group_name).group_id    except Exception as e:        return False    return group_iddef func_create_club_account_id(club_id):  # 新增财务组账户ID    try:        result = ClubAccount.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if not result:            account_id=6000000+int(club_id)*100+1            return account_id        else:            result = ClubAccount.objects.filter(club_id=club_id).aggregate(max_id=Max('account_id'))            account_id=result['max_id'] + 1            return account_id    except Exception as e:        return Falsedef func_create_club_account(account_id, club_id, type_id, group_id, account_desc):  # 新增财务组账户    try:        t = ClubAccount(account_id=account_id,                        club_id = club_id,                        type_id = type_id,                        group_id = group_id,                        account_desc=account_desc)        t.save()        return True    except Exception as e:        return Falsedef func_add_operator(operator_name, login_id, club_id,permission_group_id,developer_id):  # 新增操作员    try:        result = Operator.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id) \            .filter(login_id=login_id).exists()        if result:            message = False            return message        else:            try:                result = Operator.objects.aggregate(max_id=Max('operator_id'))                operator_id = result['max_id']                operator_id = operator_id + 1            except Exception as e:                operator_id = '3000'            ps = '123456'            dj_ps = make_password(ps, None, 'pbkdf2_sha256')            t = Operator(operator_id=operator_id, operator_name=operator_name,                         login_id=login_id, club_id=club_id, password=dj_ps, permission_group=permission_group_id,                         developer_id=developer_id)            t.save()            message = True    except Exception as e:        return e    return messagedef func_operation_relation(operator_id, group_id):  # 操作员财务组关系绑定    try:        t = Operator.objects.filter(inactive_time='2037-01-01').get(operator_id=operator_id)        t_operator_id = t.operator_id        t_operator_name = t.operator_name        t_club_id = t.club_id        t_login_id = t.login_id        t_password = t.password        t_permission_group = t.permission_group        t.inactive_time = datetime.datetime.now()        t.save()        p = Operator(operator_id=t_operator_id,                     operator_name=t_operator_name,                     club_id=t_club_id,                     group_id=group_id,                     login_id=t_login_id,                     password=t_password,                     permission_group=t_permission_group,                     active_time=datetime.datetime.now())        p.save()    except Exception as e:        return False    return True