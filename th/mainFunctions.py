from th.models import *from django.db import connectionimport datetimefrom django.db.models.aggregates import Maxfrom django.db.models.aggregates import Sumfrom django.contrib.auth.hashers import make_password,check_passwordfrom django.contrib import messagesimport timefrom django.utils.timezone import now, timedeltaimport copyimport randomfrom th.pokerConnection import *def func_get_clubid(club_name):    try:        result = poker_get_clubid(club_name)    except Exception as e:        return False    if result:        result = result[0]['clubId']    return resultdef func_register_club(club_name, game_club_id,club_level,club_short_name,water_rate,insurance_rate):    if Club.objects.filter(inactive_time='2037-01-01').filter(club_name=club_name).exists():        return False    if ClubId.objects.filter(inactive_time='2037-01-01').filter(game_club_id=game_club_id).exists():        return False    try:        t = ClubId(game_club_id=game_club_id,                   club_name=club_name)        t.save()    except Exception as e:        return False    try:        club_id = ClubId.objects.filter(inactive_time='2037-01-01').get(game_club_id=game_club_id).club_id    except Exception as e:        return False    try:        t = Club(club_id=club_id,                 game_club_id=game_club_id,                 club_level=club_level,                 club_name=club_name,                 club_short_name=club_short_name,                 water_rate=water_rate,                 insurance_rate=insurance_rate               )        t.save()    except Exception as e:        return False    return Truedef func_register_user_batch(game_club_id):    returndef func_clubuser_init(game_club_id):  # 由系统导入新增玩家，不适合大批量导入    list_game_user_id=poker_get_club_player_all(game_club_id)    try:        club_id=Club.objects.filter(inactive_time='2037-01-01').get(game_club_id=game_club_id).club_id    except Exception as e:        return False    str_game_user_id = ""    if list_game_user_id:        for t in list_game_user_id:            if str_game_user_id == "":                str_game_user_id = str_game_user_id + "("+copy.deepcopy(str(t))+")"            else:                str_game_user_id = str_game_user_id + ",("+copy.deepcopy(str(t))+")"    str_sql = "insert into tmp_gameUserId values" + str_game_user_id    with connection.cursor() as cursor:        cursor.callproc('clubPlayerBatch', (str_sql,club_id))        tb_result=cursor.fetchall()    for t in tb_result:        msg='系统新注册玩家' + str(t[0]) + ';' + '俱乐部新注册玩家' + str(t[1]) + ';'    list_user_name = poker_get_user_name_list(list_game_user_id)    str_user_name = ''    if list_user_name:        for t in list_user_name:            if str_user_name == '':                str_user_name = '(' + str(t['playerId']) + ',' + '"' + t['nickname'] + '"' + ')'            else:                str_user_name = str_user_name + ',(' + str(t['playerId']) + ',' + '"' + t['nickname'] + '"' + ')'        str_sql = "insert into tmp_gameUserName values" + str_user_name    with connection.cursor() as cursor:        cursor.callproc('registerUserBatch', (str_sql,))    return msgdef func_add_group(group_name, club_id):  # 增加客服财务组函数    try:        if OperatorGroup.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(group_name=group_name).exists():            return False        else:            t=OperatorGroup(group_name=group_name,                            club_id=club_id)            t.save()            group_id=OperatorGroup.objects.filter(inactive_time='2037-01-01').get(group_name=group_name).group_id    except Exception as e:        return False    return group_iddef func_create_club_account_id(club_id):  # 新增财务组账户ID    try:        result = ClubAccount.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if not result:            account_id=6000000+int(club_id)*100+1            return account_id        else:            result = ClubAccount.objects.filter(club_id=club_id).aggregate(max_id=Max('account_id'))            account_id=result['max_id'] + 1            return account_id    except Exception as e:        return Falsedef func_create_club_account(account_id, club_id, type_id, group_id, account_desc):  # 新增财务组账户    try:        t = ClubAccount(account_id=account_id,                        club_id = club_id,                        type_id = type_id,                        group_id = group_id,                        account_desc=account_desc)        t.save()        return True    except Exception as e:        return Falsedef func_add_operator(operator_name, login_id, club_id,permission_group_id,developer_id):  # 新增操作员    try:        result = Operator.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id) \            .filter(login_id=login_id).exists()        if result:            message = False            return message        else:            try:                result = Operator.objects.aggregate(max_id=Max('operator_id'))                operator_id = result['max_id']                operator_id = operator_id + 1            except Exception as e:                operator_id = '3000'            ps = '123456'            dj_ps = make_password(ps, None, 'pbkdf2_sha256')            t = Operator(operator_id=operator_id, operator_name=operator_name,                         login_id=login_id, club_id=club_id, password=dj_ps, permission_group=permission_group_id,                         developer_id=developer_id)            t.save()            message = True    except Exception as e:        return e    return messagedef func_operation_relation(operator_id, group_id):  # 操作员财务组关系绑定    try:        t = Operator.objects.filter(inactive_time='2037-01-01').get(operator_id=operator_id)        t_operator_id = t.operator_id        t_operator_name = t.operator_name        t_club_id = t.club_id        t_login_id = t.login_id        t_password = t.password        t_permission_group = t.permission_group        t.inactive_time = datetime.datetime.now()        t.save()        p = Operator(operator_id=t_operator_id,                     operator_name=t_operator_name,                     club_id=t_club_id,                     group_id=group_id,                     login_id=t_login_id,                     password=t_password,                     permission_group=t_permission_group,                     active_time=datetime.datetime.now())        p.save()    except Exception as e:        return False    return Truedef func_register_club_user(user_name, club_id, remark, note):  # 新俱乐部玩家注册    user_info = func_sys_new_user(user_name)    if user_info:        user_id = user_info['user_id']        account_id = user_info['account_id']        t = ClubUser.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(user_id=user_id)        if not t.exists():            t = ClubUser(club_id=club_id,                         user_id=user_id,                         account_id=account_id,                         remark=remark,                         note=note)            t.save()        t = UserAccount.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(user_id=user_id)        if not t.exists():            t = UserAccount(club_id=club_id,                            account_id=account_id,                            user_id=user_id,                            account_level=1)            t.save()    else:        return False    return Truedef func_sys_new_user(user_name):  # 判定是否该玩家已经注册，如未注册就新注册,返回userid和account_id    try:        game_user_id = poker_get_game_user_id(user_name)        if game_user_id:            try:                user_id = UserId.objects.filter(inactive_time='2037-01-01').get(game_user_id=game_user_id).user_id                account_id = AccountId.objects.filter(inactive_time='2037-01-01').get(user_id=user_id).account_id                user_info = {'user_id': user_id, 'account_id': account_id}                return user_info            except :  # 新玩家注册                t = UserId(game_user_id=game_user_id)                t.save()                user_id = UserId.objects.filter(inactive_time='2037-01-01').get(game_user_id=game_user_id).user_id                t = AccountId(user_id=user_id)                t.save()                account_id = AccountId.objects.filter(inactive_time='2037-01-01').get(user_id=user_id).account_id                p = User(user_id=user_id,                         user_name=user_name,                         game_user_id=game_user_id)                p.save()                user_info = {'user_id': user_id, 'account_id': account_id}                return user_info    except Exception as e:        return Falsedef func_user_feedback_reg(user_id, club_id, feedback_rate, feedback_type):  # 玩家返水配置    try:        t=ClubUserFeedBack.objects.filter(inactive_time='2037-01-01').filter(user_id=user_id).filter(club_id=club_id)        if t.exists():            t.update(inactive_time=now())        else:            t=ClubUserFeedBack(user_id=user_id,                               club_id=club_id,                               feedback_rate=feedback_rate,                               feedback_type=feedback_type)            t.save()        return True    except Exception as e:        return Falsedef func_get_user_id_by_user_name(user_name):  # 根据玩家名返回userid    try:        user_id=User.objects.filter(inactive_time='2037-01-01').get(user_name=user_name).user_id        return user_id    except Exception as e:        return Falsedef func_get_account_by_userid(user_id,club_id): # 根据userid返回account_id    try:        account_id = UserAccount.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id).account_id        return account_id    except Exception as e:        return Falsedef func_get_userlist_by_clubid(club_id):  # 返回俱乐部玩家列表    with connection.cursor() as cursor:        cursor.callproc('getUserListByClubId', (club_id,))        tb_result = cursor.fetchall()    return tb_resultdef func_dropdown_userinfo(club_id):  # 俱乐部玩家信息下拉框    with connection.cursor() as cursor:        cursor.callproc('getUserDropDownInfo', (club_id,))        tb_result = cursor.fetchall()    return tb_resultdef func_user_account_info(club_id,user_id,account_id):  # 返回用户账户基本信息    try:        balance = UserBalance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\                .filter(account_id=account_id).order_by('-id')[0].balance    except:        balance = 0    balance = round(balance/10000,2)    tb_result = {'balance': balance}    return tb_resultdef func_user_master_accountinfo(club_id,account_id):  # 返回主账户用户名    master_account = func_get_master_account_name(club_id, account_id)    return master_accountdef func_get_master_account_name(club_id, account_id):    with connection.cursor() as cursor:        cursor.callproc('getMasterAccountInfo', (club_id, account_id))        tb_result = cursor.fetchall()    for t in tb_result:        master_name = t[0]    return master_namedef func_create_serial_no(club_id,operator_id):  # 流水号生成    part1 = str(datetime.datetime.now().strftime('%m%d%H%M%S'))    part2 = str(club_id) + str(operator_id)    part3 = str(random.randint(0,999)).zfill(3)    serial_no = part1 + part2 + part3    return serial_nodef func_user_cash(account_id, user_id, club_id, type_id, operator_id, chance, note, serial_no):  # 玩家账户存取款    try:        balance = UserBalance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .filter(account_id=account_id).order_by('-id')[0].balance    except Exception as e:        balance = 0    if type_id > 2000:        chance = chance * -1    balance = balance + chance    t = UserBalance(serial_no=serial_no,                    account_id=account_id,                    user_id=user_id,                    club_id=club_id,                    balance=balance,                    chance=chance,                    type_id=type_id,                    operator_id=operator_id,                    note=note)    t.save()    return Truedef func_club_cash(account_id, club_id, type_id, operator_id, chance, group_id, note, serial_no):  # 客服账户存取款    try:        balance = ClubBalance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id)\                .order_by('-id')[0].balance    except Exception as e:        balance = 0    if type_id > 2000:        chance = chance * -1    balance = balance + chance    t = ClubBalance(serial_no=serial_no,                    account_id=account_id,                    club_id=club_id,                    type_id=type_id,                    balance=balance,                    chance=chance,                    operator_id=operator_id,                    group_id=group_id,                    note=note)    t.save()    return Truedef func_club_subs_accountlist(club_id, group_id):  # 客服账户余额列表    with connection.cursor() as cursor:        cursor.callproc('getGroupBalanceList', (club_id,group_id))        tb_result = cursor.fetchall()        cursor.callproc('getGroupBalanceSum', (club_id, group_id))        tb_sum = cursor.fetchall()        if len(tb_sum) == 0:            tb_sum = 0        else:            tb_sum = tb_sum[0][0]    result = []    result.extend(tb_result)    result.append(("账户合计", tb_sum))    return resultdef func_user_balance_check(club_id, account_id, chance):  # 玩家取款余额判定    try:        balance = UserBalance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id)\                    .filter(club_id=club_id).order_by('-id')[0].balance    except:        balance = 0    if balance - chance < 0:        return False    else:        return Truedef func_club_balance_check( account_id, chance):  # 俱乐部取款余额判定    try:        balance = ClubBalance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id)\                    .order_by('-id')[0].balance    except:        balance = 0    if balance - chance < 0:        return False    else:        return Truedef func_user_balance_subs_list(club_id, account_id):  # 玩家余额列表返回近10条    with connection.cursor() as cursor:        cursor.callproc('getUserBalanceSubsList', (club_id, account_id))        tb_result=cursor.fetchall()    return tb_resultdef func_user_note(club_id, user_id):    try:        user_info = ClubUser.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(user_id=user_id).values('remark','note')        for t in user_info:            remark = t['remark']            note = t['note']        user_note={'remark': remark, 'note': note}        return user_note    except Exception as e:        return False